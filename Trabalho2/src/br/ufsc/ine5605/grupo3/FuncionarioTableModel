import br.ufsc.ine5605.grupo3.entidades.Funcionario;
import br.ufsc.ine5605.grupo3.entidades.Funcionario.Cargo;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Caio
 */
public class FuncionarioTableModel extends AbstractTableModel {
    
     private static final int MATRICULA = 0;
    private static final int NOME = 1;
    private static final int CARGO = 2;
    private TelaFuncionario owner;
    
    private String[] cabecalho = new String[] {"Matricula", "Nome", "Partido"};
    private ArrayList<Funcionario> funcionarios;
    
        public FuncionarioTableModel( TelaFuncionario owner, HashMap<Integer, Funcionario> novosFuncionarios){
        this.owner = owner;
        this.funcionarios = new ArrayList<>();
        this.atualizarDados(novosFuncionarios);
    }

    @Override
    public int getRowCount() {
          return this.funcionarios.size();
    }

    @Override
    public int getColumnCount() {
        return this.cabecalho.length;
    }
    
    public Funcionario getFuncionario(int indiceLinha) {
        return funcionarios.get(indiceLinha);        
    }

    @Override
    public Object getValueAt(int linha, int coluna) {
        
        Funcionario funcionario = (Funcionario) funcionarios.get(linha); 
        if(funcionario == null)
            return null;
        
        switch(coluna){
            case MATRICULA:
                return funcionario.getNumeroMatricula();
            case NOME:
                return funcionario.getNome();
            case CARGO:
                 return funcionario.getCargo();
        }
        return null;
    }
    
    @Override
    public String getColumnName(int columnIndex) {
        return cabecalho[columnIndex];
    }
    
     @Override
     public boolean isCellEditable(int row, int col){ 
         return true; 
     }
    
        public void setCabecalho(String[] cabecalho) {
        this.cabecalho = cabecalho;
    }

    public void atualizarDados(HashMap<Integer, Funcionario> novosFuncionarios) {
        funcionarios.removeAll(funcionarios);
        
        Funcionario funcionario;
        int i = 0;
        for(Integer keyFuncionario : novosFuncionarios.keySet()) {  //percorre as chaves do hashmap
            funcionario = novosFuncionarios.get(keyFuncionario);    //seleciona o funcionario correspondente
            if(!funcionarios.contains(funcionario)) {               //Se o funcionario nao existe
                funcionarios.add(i, funcionario);                   // Novo funcionario 
            }
            i++;                                                    //nova posição
        }
    }
    
        public void setValueAt(Object value, int linha, int coluna) {
        Funcionario funcionario = (Funcionario) funcionarios.get(linha); 
               
        switch(coluna){
           case NOME:
               funcionario.setNome((String)value);                
               break;
           case CARGO:
               funcionario.setCargo((Cargo)value);
               break;
        }        
        owner.atualizaFuncionario(funcionario);
        fireTableCellUpdated(linha, coluna);
    }
        
        
    
    
}
